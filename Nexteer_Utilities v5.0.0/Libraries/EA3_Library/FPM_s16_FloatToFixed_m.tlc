%% File : FPM_s16_FloatToFixed_m.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for FPM_s16_FloatToFixed_m
%%
%% Simulink version      : 8.2 (R2013b) 08-Aug-2013
%% TLC file generated on : 11-Jun-2014 10:23:57

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'FPM_s16_FloatToFixed_m';
     def.OutputFcnSpec = 'int16  y1 = FPM_s16_FloatToFixed_m(single u1, single p1)';
     def.HeaderFiles = {'GlobalMacro.h', 'fixmath.h'};
     def.SourceFiles = {'utility.c'};
     def.IncPaths = {'..'};
     def.SrcPaths = {'..'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements FPM_s16_FloatToFixed_m "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C
  %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
  %endif

   %<LibAddToCommonIncludes("fixmath.h")>
 
  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
    %if !LibBlockOutputSignalIsExpr(0)
    %assign u1_val = LibBlockInputSignal(0, "", "", 0)
    %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
    %assign scaleFactor = LibBlockParameter(p1, "", "", 0)
    %assign logScaleFactor = FEVAL("log", %<scaleFactor> )
    %assign log2 = FEVAL("log",2)
    %assign p_val = %<logScaleFactor> / %<log2>
    %assign s_val = 15 - %<p_val>
    %%

        %if %<p_val> < 0

            %assign absP = FEVAL("abs",%<p_val>)
            %assign p_int = CAST("Number",%<absP>)
            %assign s_int = CAST("Number",%<s_val>)
            %assign str_val = STRING("s%<s_int>pm%<p_int>_T")
            
        %elseif %<p_val> > 15

            %assign absS = FEVAL("abs",%<S_val>)
            %assign p_int = CAST("Number",%<p_val>)
            %assign s_int = CAST("Number",%<absS>)
            %assign str_val = STRING("sm%<s_int>p%<p_int>_T")

        %else

            %assign p_int = CAST("Number",%<p_val>)
            %assign s_int = CAST("Number",%<s_val>)
            %assign str_val = STRING("s%<s_int>p%<p_int>_T")

        %endif

        %<y1_val> = FPM_FloatToFixed_m( %<u1_val> , %<str_val> );
    %endif 
  %%
%endfunction

%% Function: BlockOutputSignal ============================================
%%
%function BlockOutputSignal(block,system,portIdx,ucv,lcv,idx,retType) void
  %%
  %assign u1_val = LibBlockInputSignal(0, "", "", 0)
  %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
    %assign scaleFactor = LibBlockParameter(p1, "", "", 0)
    %assign logScaleFactor = FEVAL("log", %<scaleFactor> )
    %assign log2 = FEVAL("log",2)
    %assign p_val = %<logScaleFactor> / %<log2>
    %assign s_val = 15 - %<p_val>
    %%

        %if %<p_val> < 0

            %assign absP = FEVAL("abs",%<p_val>)
            %assign p_int = CAST("Number",%<absP>)
            %assign s_int = CAST("Number",%<s_val>)
            %assign str_val = STRING("s%<s_int>pm%<p_int>_T")
            
        %elseif %<p_val> > 15

            %assign absS = FEVAL("abs",%<s_val>)
            %assign p_int = CAST("Number",%<p_val>)
            %assign s_int = CAST("Number",%<absS>)
            %assign str_val = STRING("sm%<s_int>p%<p_int>_T")

        %else

            %assign p_int = CAST("Number",%<p_val>)
            %assign s_int = CAST("Number",%<s_val>)
            %assign str_val = STRING("s%<s_int>p%<p_int>_T")

        %endif

  %%
  %switch retType
    %case "Signal"
      %if portIdx == 0
        %return "FPM_FloatToFixed_m( %<u1_val> , %<str_val> )"
      %else
        %assign errTxt = "Block output port index not supported: %<portIdx>"
        %<LibBlockReportError(block,errTxt)>
      %endif
    %default
      %assign errTxt = "Unsupported return type: %<retType>"
      %<LibBlockReportError(block,errTxt)>
  %endswitch
  %%
%endfunction

%% [EOF]
