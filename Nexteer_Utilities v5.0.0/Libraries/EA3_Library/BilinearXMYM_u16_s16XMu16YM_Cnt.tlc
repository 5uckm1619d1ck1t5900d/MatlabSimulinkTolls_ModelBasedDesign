%% File : BilinearXMYM_u16_s16XMu16YM_Cnt.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for BilinearXMYM_u16_s16XMu16YM_Cnt
%%
%% Simulink version      : 7.9 (R2012a) 29-Dec-2011
%% TLC file generated on : 04-Jul-2013 07:41:05
%include "InterpUtility.tlc"

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'BilinearXMYM_u16_s16XMu16YM_Cnt';
     def.OutputFcnSpec = 'uint16 y1 = BilinearXMYM_u16_s16XMu16YM_Cnt(uint16 u1,  int16 u2, uint16 p1[], uint16 size(p1,1),  int16 p2[], uint16 p3[], uint16 size(p2,1))';
     def.HeaderFiles = {'GlobalMacro.h'};
     def.SourceFiles = {'interpolation.c'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements BilinearXMYM_u16_s16XMu16YM_Cnt "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C
  %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
  %endif

  %<LibAddToCommonIncludes("GlobalMacro.h")>
  %<SLibAddToStaticSources("interpolation.c")>

  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
    %if !LibBlockOutputSignalIsExpr(0)
    %assign p1_ptr = LibBlockParameterBaseAddr(p1)
    %assign p2_ptr = LibBlockParameterBaseAddr(p2)
    %assign p3_ptr = LibBlockParameterBaseAddr(p3)
    %assign u1_val = LibBlockInputSignal(0, "", "", 0)
    %assign u2_val = LibBlockInputSignal(1, "", "", 0)
    %assign p1_dim1_val = LibBlockParameterWidth(p1)
    %assign p2_dim1_val = LibBlockParameterWidth(p2)
    %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
    %%
    %<y1_val> = BilinearXMYM_u16_s16XMu16YM_Cnt( (uint16_T)%<u1_val>, (int16_T)%<u2_val>, (uint16_T*)%<p1_ptr>, %<getVectorSizeExpression(p1)>, (int16_T*)%<p2_ptr>, (uint16_T*)%<p3_ptr>, %<getMatrixSizeExpression(p3, p1)>);
    %endif 
  %%
%endfunction

%% Function: BlockOutputSignal ============================================
%%
%function BlockOutputSignal(block,system,portIdx,ucv,lcv,idx,retType) void
  %%
  %assign p1_ptr = LibBlockParameterBaseAddr(p1)
  %assign p2_ptr = LibBlockParameterBaseAddr(p2)
  %assign p3_ptr = LibBlockParameterBaseAddr(p3)
  %assign u1_val = LibBlockInputSignal(0, "", "", 0)
  %assign u2_val = LibBlockInputSignal(1, "", "", 0)
  %assign p1_dim1_val = LibBlockParameterWidth(p1)
  %assign p2_dim1_val = LibBlockParameterWidth(p2)
  %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
  %%
  %switch retType
    %case "Signal"
      %if portIdx == 0
        %return "BilinearXMYM_u16_s16XMu16YM_Cnt( (uint16_T)%<u1_val>, (int16_T)%<u2_val>, (uint16_T*)%<p1_ptr>, %<getVectorSizeExpression(p1)>, (int16_T*)%<p2_ptr>, (uint16_T*)%<p3_ptr>, %<getMatrixSizeExpression(p3, p1)>)"
      %else
        %assign errTxt = "Block output port index not supported: %<portIdx>"
        %<LibBlockReportError(block,errTxt)>
      %endif
    %default
      %assign errTxt = "Unsupported return type: %<retType>"
      %<LibBlockReportError(block,errTxt)>
  %endswitch
  %%
%endfunction

%% [EOF]
