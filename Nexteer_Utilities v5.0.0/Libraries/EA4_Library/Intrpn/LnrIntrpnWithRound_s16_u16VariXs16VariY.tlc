%% File : LnrIntrpnWithRound_s16_u16VariXs16VariY.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for LnrIntrpnWithRound_s16_u16VariXs16VariY
%%
%% Simulink version      : 8.2 (R2013b) 08-Aug-2013
%% TLC file generated on : 27-Mar-2015 15:12:39

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'LnrIntrpnWithRound_s16_u16VariXs16VariY';
     def.OutputFcnSpec = ' int16 y1 = LnrIntrpnWithRound_s16_u16VariXs16VariY(uint16 u1[],  int16 u2[], uint16 u3, uint16 u4)';
     def.HeaderFiles = {'NxtrIntrpn.h', 'NxtrIntrpn_MemMap.h', 'Std_Types.h', 'Platform_Types.h', 'Compiler.h', 'Compiler_Cfg.h'};
     def.SourceFiles = {'NxtrIntrpn.c'};
     def.IncPaths = {'..\SrcFiles'};
     def.SrcPaths = {'..\SrcFiles'};
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements LnrIntrpnWithRound_s16_u16VariXs16VariY "C"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% The Target Language must be C
  %if ::GenCPP==1
    %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C Target Language")>
  %endif

  %<LibAddToCommonIncludes("NxtrIntrpn.h")>
  %<LibAddToCommonIncludes("NxtrIntrpn_MemMap.h")>
  %<LibAddToCommonIncludes("Std_Types.h")>
  %<LibAddToCommonIncludes("Platform_Types.h")>
  %<LibAddToCommonIncludes("Compiler.h")>
  %<LibAddToCommonIncludes("Compiler_Cfg.h")>
  %<SLibAddToStaticSources("NxtrIntrpn.c")>

  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
  %%
    %if !LibBlockOutputSignalIsExpr(0)
    %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
    %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
    %assign u3_val = LibBlockInputSignal(2, "", "", 0)
    %assign u4_val = LibBlockInputSignal(3, "", "", 0)
    %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
    %%
    %<y1_val> = LnrIntrpnWithRound_s16_u16VariXs16VariY( (uint16_T*)%<u1_ptr>, (int16_T*)%<u2_ptr>, (uint16_T)%<u3_val>, (uint16_T)%<u4_val>);
    %endif 
  %%
%endfunction

%% Function: BlockOutputSignal ============================================
%%
%function BlockOutputSignal(block,system,portIdx,ucv,lcv,idx,retType) void
  %%
  %assign u1_ptr = LibBlockInputSignalAddr(0, "", "", 0)
  %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
  %assign u3_val = LibBlockInputSignal(2, "", "", 0)
  %assign u4_val = LibBlockInputSignal(3, "", "", 0)
  %assign y1_val = LibBlockOutputSignal(0, "", "", 0)
  %%
  %switch retType
    %case "Signal"
      %if portIdx == 0
        %return "LnrIntrpnWithRound_s16_u16VariXs16VariY( (uint16_T*)%<u1_ptr>, (int16_T*)%<u2_ptr>, (uint16_T)%<u3_val>, (uint16_T)%<u4_val>)"
      %else
        %assign errTxt = "Block output port index not supported: %<portIdx>"
        %<LibBlockReportError(block,errTxt)>
      %endif
    %default
      %assign errTxt = "Unsupported return type: %<retType>"
      %<LibBlockReportError(block,errTxt)>
  %endswitch
  %%
%endfunction

%% [EOF]
